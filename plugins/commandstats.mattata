--[[
    Copyright 2017 Diego Barreiro <diego@makeroid.io>
    This code is licensed under the MIT. See LICENSE for details.
]]

local commandstats = {}
local mattata = require('mattata')
local redis = dofile('libs/redis.lua')

function commandstats:init()
    commandstats.commands = mattata.commands(self.info.username)
    :command('commandstats')
    :command('cmdstats').table
    commandstats.help = '/commandstats - Shows statistical information about the current chat\'s top ten commands (ordered by message count). Alias: /cmdstats.'
end

function commandstats.reset_command_stats(chat_id)
    if not chat_id
    or tonumber(chat_id) == nil
    then
        return false
    end
    local messages = redis:keys('commandstats:' .. chat_id .. ':*')
    for k, v in pairs(messages)
    do
        redis:del(v)
    end
    return true
end

function commandstats.get_command_stats(chat_id, title, language)
    local commands = redis:smembers('chat:' .. chat_id .. ':commands')
    local statistics = {}
    for i = 1, #commands
    do
        local command = commands[i]
        local command_info = {
            ['command'] = command
        }
        command_info.count = redis:get('commandstats:' .. chat_id .. ':' .. command)
        if command_info.count
        and tonumber(command_info.count) ~= nil
        then
            table.insert(
                statistics,
                command_info
            )
        end
    end
    table.sort(
        statistics,
        function(a, b)
            if a.count
            and b.count
            then
                return tonumber(a.count) > tonumber(b.count)
            end
        end
    )
    local total = 0
    for k, v in pairs(statistics)
    do
        total = total + v.count
    end
    local text = ''
    local output = {}
    for i = 1, 10
    do
        table.insert(
            output,
            statistics[i]
        )
    end
    for k, v in pairs(output)
    do
        local percent = tostring(
            mattata.round(
                (v.count / total) * 100,
                1
            )
        )
        text = text .. mattata.escape_html(v.command) .. ': <b>' .. mattata.comma_value(v.count) .. '</b> [' .. percent .. '%]\n'
    end
    if not text
    or text == ''
    then
        return language['commandstats']['1']
    end
    return string.format(
        language['commandstats']['2'],
        mattata.escape_html(title),
        text,
        mattata.comma_value(total):gsub('%..-$', '')
    )
end

function commandstats:on_message(message, configuration, language)
    if message.chat.type == 'private'
    then
        return
    end
    local input = mattata.input(message.text)
    if input
    and input:lower() == 'reset'
    and (
        mattata.is_group_admin(
            message.chat.id,
            message.from.id,
            true
        )
        or mattata.is_global_admin(message.from.id)
    )
    then
        return mattata.send_message(
            message.chat.id,
            commandstats.reset_command_stats(message.chat.id)
            and language['commandstats']['3']
            or language['commandstats']['4']
        )
    end
    return mattata.send_message(
        message.chat.id,
        commandstats.get_command_stats(
            message.chat.id,
            message.chat.title,
            language
        ),
        'html'
    )
end

return commandstats