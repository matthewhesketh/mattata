--[[
    Copyright 2017 Diego Barreiro <diego@makeroid.io>
    This code is licensed under the MIT. See LICENSE for details.
]]

local avatar = {}
local mattata = require('mattata')
local json = require('dkjson')
local redis = dofile('libs/redis.lua')

function avatar:init()
    avatar.commands = mattata.commands(self.info.username):command('avatar').table
    avatar.help = '/avatar <user> [offset] - Sends the profile photos of the given user, of which can be specified by username or numerical ID. If an offset is given after the username (which must be a numerical value), then the nth profile photo is sent (if available).'
end

function avatar:on_inline_query(inline_query, configuration, language)
    local input = mattata.input(inline_query.query)
    or inline_query.from.id
    local selected_photo = false
    if tostring(input):match('^.- %d*$')
    then
        selected_photo = tostring(input):match('^.- (%d*)$')
        input = tostring(input):match('^(.-) %d*$')
    end
    local success = true
    local old_input = input
    if tonumber(input) == nil
    then
        input = mattata.get_user(input)
        if not input
        then
            success = false
        else
            input = input.result.id
        end
    end
    if success
    then
        success = mattata.get_user_profile_photos(input)
    end
    if not success
    then
        return mattata.send_inline_article(
            inline_query.id,
            language['errors']['generic'],
            language['avatar']['1']
        )
    elseif success.result.total_count == 0
    or redis:get('user:' .. input .. ':opt_out')
    then
        return
    elseif selected_photo
    then
        if tonumber(selected_photo) < 1
        or tonumber(selected_photo) > success.result.total_count
        then
            return
        end
    end
    local results = {}
    local count = 1
    for i = (
        tonumber(selected_photo)
        or 1
    ), (
        tonumber(selected_photo)
        or success.result.total_count
    )
    do
        table.insert(
            results,
             {
                ['type'] = 'photo',
                ['id'] = tostring(count),
                ['photo_file_id'] = success.result.photos[i][#success.result.photos[i]].file_id,
                ['caption'] = string.format(
                    'User: %s\nPhoto: %s/%s\nSend /avatar %s [offset] to @%s to view a specific photo of this user',
                    old_input,
                    i,
                    success.result.total_count,
                    old_input,
                    self.info.username
                )
            }
        )
        count = count + 1
    end
    return mattata.answer_inline_query(
        inline_query.id,
        json.encode(results)
    )
end

function avatar:on_message(message, configuration, language)
    local input = mattata.input(message.text)
    if not input
    then
        return mattata.send_reply(
            message,
            avatar.help
        )
    end
    if input == '-r'
    then
        local users = redis:keys('user:*:info')
        local id, photos
        repeat
            id = redis:hget(
                users[math.random(#users)],
                'id'
            )
            photos = mattata.get_user_profile_photos(id)
        until photos
        and photos.result
        and photos.result.total_count > 0
        and not redis:get('user:' .. id .. ':opt_out')
        local random_photo = math.random(photos.result.total_count)
        return mattata.send_photo(
            message.chat.id,
            photos.result.photos[random_photo][#photos.result.photos[random_photo]].file_id
        )
    end
    local selected_photo = 1
    if input:match(' %d*$')
    then
        selected_photo = tonumber(input:match(' (%d*)$'))
        input = input:match('^(.-) %d*$')
    end
    local success = true
    local old_input = input
    if tonumber(input) == nil
    then
        input = mattata.get_user(input)
        if not input
        then
            success = false
        else
            input = input.result.id
        end
    end
    if success
    then
        success = mattata.get_user_profile_photos(input)
    end
    if not success
    then
        return mattata.send_reply(
            message,
            language['avatar']['1']
        )
    elseif success.result.total_count == 0
    or redis:get('user:' .. input .. ':opt_out')
    then
        return mattata.send_reply(
            message,
            success.result.total_count == 0
            and language['avatar']['2']
            or language['avatar']['4']
        )
    elseif tonumber(selected_photo) < 1
    or tonumber(selected_photo) > success.result.total_count
    then
        return mattata.send_reply(
            message,
            language['avatar']['3']
        )
    end
    local highest_res = success.result.photos[selected_photo][#success.result.photos[selected_photo]].file_id
    local caption = string.format(
        'User: %s\nPhoto: %s/%s\nUse /avatar %s [offset] to view a specific photo of this user',
        old_input,
        selected_photo,
        success.result.total_count,
        old_input
    )
    return mattata.send_photo(
        message.chat.id,
        highest_res,
        caption
    )
end

return avatar
