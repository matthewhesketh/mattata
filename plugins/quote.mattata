--[[
    Copyright 2017 Diego Barreiro <diego@makeroid.io>
    This code is licensed under the MIT. See LICENSE for details.
]]

local quote = {}
local mattata = require('mattata')
local json = require('dkjson')
local redis = dofile('libs/redis.lua')

function quote:init()
    quote.commands = mattata.commands(self.info.username):command('quote').table
    quote.help = '/quote - Returns a randomly-selected, quoted message from the replied-to user. Quoted messages are stored when a user uses /save in reply to the said user\'s message(s).'
end

function quote:on_message(message, configuration, language)
    if not message.reply
    then
        local quotes = redis:keys('quotes:*')
        if not next(quotes)
        or #quotes < 1
        then
            return false
        end
        local user, quote
        repeat
            quote = quotes[math.random(#quotes)]
            user = quote:match(':(%d+)$')
        until mattata.get_chat(user)
        user = mattata.get_chat(user).result
        quote = json.decode(
            redis:get(quote)
        )
        return mattata.send_reply(
            message,
            string.format(
                '<i>%s</i>\n– %s%s',
                mattata.escape_html(quote[math.random(#quote)]),
                mattata.escape_html(user.name),
                user.username
                and ' (@' .. user.username .. ')'
                or ''
            ),
            'html'
        )
    elseif redis:get('user:' .. message.reply.from.id .. ':opt_out')
    then
        redis:del('quotes:' .. message.reply.from.id)
        return mattata.send_reply(
            message,
            language['quote']['1']
        )
    end
    local quotes = redis:get('quotes:' .. message.reply.from.id)
    if not quotes
    then
        return mattata.send_reply(
            message,
            string.format(
                language['quote']['2'],
                message.reply.from.username
                and '@'
                or '',
                message.reply.from.username
                or message.reply.from.first_name
            )
        )
    end
    quotes = json.decode(quotes)
    return mattata.send_reply(
        message,
        string.format(
            '<i>%s</i>\n– %s%s',
            mattata.escape_html(quotes[math.random(#quotes)]),
            mattata.escape_html(message.reply.from.name),
            message.reply.from.username
            and ' (@' .. message.reply.from.username .. ')'
            or ''
        ),
        'html'
    )
end

return quote